#This is a setting that tells the Spring framework where to find the database.
#jdbc:sqlserver://localhost:1433 - This is the URL for the SQL Server database. It tells Spring that the database is located on the local machine (localhost) and is listening on port 1434
#encrypt=true - This is a security setting that tells SQL Server to use encryption to protect data in transit between the application and the database
#trustServerCertificate=true - This setting tells SQL Server to trust the server's SSL/TLS certificate when using encryption.
#databaseName=PointOfSale: This is the name of the database that the application will be connecting to.
#spring.datasource.url= jdbc:sqlserver://192.168.1.104:1433;encrypt=true;trustServerCertificate=true;databaseName=tmp
#spring.datasource.username= sa
#spring.datasource.password= Expertflow464
#spring.datasource.driverClassName=com.microsoft.sqlserver.jdbc.SQLServerDriver
#spring.jpa.properties.hibernate.dialect= org.hibernate.dialect.SQLServerDialect
#spring.jpa.hibernate.ddl-auto= create
#spring.jpa.properties.hibernate.globally_quoted_identifiers=true
#spring.datasource.hikari.ssl=false

spring.datasource.url=jdbc:postgresql://192.168.100.7:5432/PointOfSale
#spring.datasource.url=jdbc:postgresql://localhost:5432/PointOfSale
spring.datasource.username=postgres
spring.datasource.password=root
spring.datasource.driver-class-name=org.postgresql.Driver


#true, Hibernate will automatically generate the necessary SQL scripts to create or update the database schema according to the entity mappings defined in your application
#false, Hibernate will not generate any DDL scripts. It assumes that the database schema is already created externally, and it will only perform validation against the existing schema without making any changes.
spring.jpa.generate-ddl=false

#create: Hibernate creates the database schema from scratch based on the entity mappings. It drops and recreates all database objects, which may result in data loss.
#update: Hibernate updates the database schema based on the entity mappings. It only adds missing tables, columns, or constraints. It does not modify existing schema objects or data.
#validate: Hibernate validates the existing database schema against the entity mappings. It does not make any changes to the schema.
#create-drop: Similar to the create option, Hibernate creates the database schema from scratch. However, it also drops the schema at the end of the session, typically used for testing purposes.
#none: Hibernate does not perform any schema management operations. It expects that the database schema is already created externally.

spring.jpa.hibernate.ddl-auto=none
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
flyway.ignoreUnknownMigrations=true

server.port=8081


# Show SQL statements
spring.jpa.show-sql=true

# Format SQL statements
spring.jpa.properties.hibernate.format_sql=true

# Log SQL statements to console
#logging.level.org.hibernate.SQL=debug
#logging.level.org.hibernate.type=TRACE


# Log SQL statement parameters to console
logging.level.org.hibernate.type.descriptor.sql=TRACE


logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type=TRACE

##########################################################################
#           Logging
##########################################################################
logging.file.path = SprintBootAppWithSQL/logs/
##########################################################################
#           JWT
##########################################################################
jwt.private.key = pnc1wRdy2Sh2DJAFaVGJocG7OMa9RTmM
jwt.audience = EE3CC1F6AB392EBBEAC1DB1F41C74
jwt.issuer = D6A4957A21FA51EA945AE9C958E95
# expiry is in milliseconds. = 5 mints 300000/60000
jwt.expiry=600000
jwt.refresh.token.expiry=6000000
jwt.cookie.name=uzairAnwar
##########################################################################
spring.redis.host=localhost
spring.redis.port=6379
spring.redis.password=123456789